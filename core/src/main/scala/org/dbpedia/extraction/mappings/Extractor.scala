package org.dbpedia.extraction.mappings

import org.dbpedia.extraction.annotations.SoftwareAgentAnnotation
import org.dbpedia.extraction.config.provenance.{Dataset, ExtractorRecord}
import org.dbpedia.extraction.transform.Quad
import org.dbpedia.iri.IRI

/**
 * TODO: generic type may not be optimal.
 */
trait Extractor[-N] {

    var state = ExtractorState.Instantiated
    /**
     * @param input The source node
     * @param subjectUri The subject URI of the generated triples
     * @return A graph holding the extracted data
     */
    def extract(input: N, subjectUri: String): Seq[Quad]

    /**
      * when extractor has a pre-phase
      */
    def initializeExtractor(): Unit = {state = ExtractorState.Initialized}

    /**
      * when extractor needs some finalization
      */
    def finalizeExtractor(): Unit = {state = ExtractorState.Finalized}

    /**
     * Datasets generated by this extractor. Used for serialization. If a mapping implementation
     * does not return all datasets it produces, serialization may fail.
     */
    val datasets: Set[Dataset]

  /**
    * reflects the software agent annotation of an extractor class as an iri (e.g.:
    * http://dbpedia.org/extractor/InfoboxExtractor?githash=fa56dddb6df1b97269c14ce25430729a12775549 )
    */
  lazy val softwareAgentAnnotation: IRI = SoftwareAgentAnnotation.getAnnotationIri(this.getClass)
}

object ExtractorState extends Enumeration {
    val Instantiated,Initialized,Finalized = Value
}